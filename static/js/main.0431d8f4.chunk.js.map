{"version":3,"sources":["component/Table.js","component/App.js","serviceWorker.js","index.js"],"names":["Cell","className","onClick","this","props","onMouseEnter","value","React","Component","Table","i","j","key","cells","cols","colNum","push","renderCell","rows","rowNum","renderRow","renderTable","App","Array","fill","state","mouseDown","select","draw","row","col","newCell","n","Object","assign","A","B","C","D","ans","setState","updateCell","handleClick","style","userSelect","onMouseUp","onMouseDown","handleMouseEnter","reset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0431d8f4.chunk.js","sourcesContent":["import React from 'react';\nimport './Table.css'\n\nclass Cell extends React.Component {\n  render() {\n    return (\n      <span className='cell' \n            onClick={this.props.onClick}\n            onMouseEnter={this.props.onMouseEnter}>\n        {this.props.value}    \n      </span>\n    )\n  }\n}\n\nexport default class Table extends React.Component {\n  renderCell(i, j) {\n      return <Cell key={j} \n                   value={this.props.cells[i][j]} \n                   onClick={() => this.props.onClick(i, j)}\n                   onMouseEnter={() => this.props.onMouseEnter(i, j)}\n              />\n  }\n\n  renderRow(i) {\n    const cols = [];\n    for (let j = 0; j < this.props.colNum; j++) {\n      cols.push(this.renderCell(i, j));\n    }\n    return cols;\n  }\n\n  renderTable() {\n    const rows = [];\n    for (let i = 0; i < this.props.rowNum; i++) {\n      rows.push(<div key={i} \n                     className='row'>{this.renderRow(i)}\n                </div>)\n    }\n    return rows;\n  }\n\n  render() {\n    return (\n      <div className='table'>\n        {this.renderTable()}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport Table from \"./Table\";\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.rows = 25\n    this.cols = 50\n    this.cells = Array(this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      this.cells[i] = Array(this.cols).fill(\" \");\n    }\n\n    this.state = {\n      mouseDown: false,\n      select: \"none\",\n      draw: \"draw\",\n      row: this.rows,\n      col: this.cols,\n      cells: this.cells\n    }\n  }\n\n  // newCell = false when adjacent cells are being updated\n  // draw = false when erasing\n  updateCell(i, j, newCell, draw) {\n    if (draw === \"select\") {\n      return;\n    }\n    let newState = Object.assign({}, this.state);\n    let n = newState.cells;\n    // don't update oob cells\n    if (i <= 0 || j <= 0 || i >= this.rows - 1 || j >= this.cols - 1) {\n      return;\n    }\n\n    // don't update empty adjacent cells\n    if (newCell === false && n[i][j] === \" \") {\n      return;\n    }\n\n    let A = n[i-1][j];\n    let B = n[i][j+1];\n    let C = n[i+1][j];\n    let D = n[i][j-1];\n    let ans = null;\n    //━ ┃ ┏ ┓ ┗ ┛ ┣ ┫ ┳ ┻ ╋\n    if ((A !== \" \" || C !== \" \") && B === \" \" && D === \" \") {\n      ans = '┃';\n    } else if (A === \" \" && C === \" \" && (B !== \" \" || D !== \" \")) {\n      ans = '━';\n    } else if (A === \" \" && B !== \" \" && C !== \" \" && D === \" \") {\n      ans = '┏';\n    } else if (A === \" \" && B === \" \" && C !== \" \" && D !== \" \") {\n      ans = '┓';\n    } else if (A !== \" \" && B !== \" \" && C === \" \" && D === \" \") {\n      ans = '┗';\n    } else if (A !== \" \" && B === \" \" && C === \" \" && D !== \" \") {\n      ans = '┛';\n    } else if (A !== \" \" && B !== \" \" && C !== \" \" && D === \" \") {\n      ans = '┣';\n    } else if (A !== \" \" && B === \" \" && C !== \" \" && D !== \" \") {\n      ans = '┫';\n    } else if (A === \" \" && B !== \" \" && C !== \" \" && D !== \" \") {\n      ans = '┳';\n    } else if (A !== \" \" && B !== \" \" && C === \" \" && D !== \" \") {\n      ans = '┻';\n    } else if (A !== \" \" && B !== \" \" && C !== \" \" && D !== \" \") {\n      ans = '╋';\n    } else {\n      ans = '╸'\n    }\n\n    if(draw === \"erase\") {\n      ans = \" \"\n    }\n\n    n[i][j] = ans;\n    this.setState({cells: n});\n  }\n\n  handleClick(i, j) {\n    this.updateCell(i, j, true, this.state.draw);\n    this.updateCell(i-1, j, false, \"draw\");\n    this.updateCell(i+1, j, false, \"draw\");\n    this.updateCell(i, j-1, false, \"draw\");\n    this.updateCell(i, j+1, false, \"draw\");\n  }\n\n  handleMouseEnter(i, j) {\n    if (this.state.mouseDown) {\n      this.handleClick(i, j)\n    }\n  }\n\n  reset() {\n    let newState = Object.assign({}, this.state);\n    let n = newState.cells;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        n[i][j] = \" \";\n        this.setState({cells: n})\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"component-App\"\n           style={{userSelect: this.state.select}}\n           onMouseUp={() => {this.setState({mouseDown: false})}}\n           onMouseDown={() => {this.setState({mouseDown: true})}}\n      >\n        <Table \n          colNum={this.state.col} \n          rowNum={this.state.row}\n          cells={this.state.cells}\n          onClick={(i, j) => this.handleClick(i, j)}\n          onMouseEnter={(i, j) => this.handleMouseEnter(i, j)}\n        />\n        <button onClick={() => {this.setState({draw: \"draw\", select: \"none\"})}}>Draw</button>\n        <button onClick={() => {this.setState({draw: \"erase\", select: \"none\"})}}>Erase</button>\n        <button onClick={() => {this.setState({draw: \"select\", select: \"auto\"})}}>Select</button>\n        <button onClick={() => {this.reset()}}>Reset</button>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}