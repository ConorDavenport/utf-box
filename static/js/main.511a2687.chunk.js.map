{"version":3,"sources":["component/Table.js","component/App.js","serviceWorker.js","index.js"],"names":["Cell","className","onClick","this","props","onMouseEnter","value","React","Component","Table","i","j","key","cells","cols","colNum","push","renderCell","rows","rowNum","renderRow","renderTable","App","leftmost","prevLeftmost","valueOf","Array","fill","state","mouseDown","select","tool","row","col","c","charCodeAt","newCell","n","Object","assign","check","A","B","C","D","ans","loop","m","k","checkForLimits","setState","updateCell","handleClick","tabIndex","style","userSelect","onMouseUp","onMouseDown","onKeyDown","e","String","fromCharCode","keyCode","handleMouseEnter","reset","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.511a2687.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Table.css'\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    return (\r\n      <span className='cell' \r\n            onClick={this.props.onClick}\r\n            onMouseEnter={this.props.onMouseEnter}>\r\n        {this.props.value}    \r\n      </span>\r\n    )\r\n  }\r\n}\r\n\r\nexport default class Table extends React.Component {\r\n  renderCell(i, j) {\r\n      return <Cell key={j} \r\n                   value={this.props.cells[i][j]} \r\n                   onClick={() => this.props.onClick(i, j)}\r\n                   onMouseEnter={() => this.props.onMouseEnter(i, j)}\r\n              />\r\n  }\r\n\r\n  renderRow(i) {\r\n    const cols = [];\r\n    for (let j = 0; j < this.props.colNum; j++) {\r\n      cols.push(this.renderCell(i, j));\r\n    }\r\n    return cols;\r\n  }\r\n\r\n  renderTable() {\r\n    const rows = [];\r\n    for (let i = 0; i < this.props.rowNum; i++) {\r\n      rows.push(<div key={i} \r\n                     className='row'>{this.renderRow(i)}\r\n                </div>)\r\n    }\r\n    return rows;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='table'>\r\n        {this.renderTable()}\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport Table from \"./Table\";\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.rows = 25  // number of rows and columns in table\r\n    this.cols = 50\r\n    this.leftmost = this.cols - 1 // keeps track of the leftmost filled square\r\n    this.prevLeftmost = this.leftmost.valueOf() // used to see if leftmost has changed\r\n    // create 2d array of null cells\r\n    this.cells = Array(this.rows);\r\n    for (let i = 0; i < this.rows; i++) {\r\n      this.cells[i] = Array(this.cols).fill(null);\r\n    }\r\n\r\n    this.state = {\r\n      mouseDown: false,\r\n      select: \"none\",\r\n      tool: \"draw\",\r\n      row: this.rows,\r\n      col: this.cols,\r\n      cells: this.cells,\r\n      key: \" \"\r\n    }\r\n  }\r\n\r\n  check(c) {\r\n    if (c === null || c === \" \" || c.charCodeAt(0) < 128) {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n\r\n  checkForLimits(c) {\r\n    if (c === null || c === \" \") {\r\n      return false\r\n    } else {\r\n      return true\r\n    }\r\n  }\r\n  // newCell = false when adjacent cells are being updated\r\n  updateCell(i, j, newCell, tool) {\r\n    // do nothing if select tool is selected\r\n    if (tool === \"select\") {\r\n      return;\r\n    }\r\n    let newState = Object.assign({}, this.state);\r\n    let n = newState.cells;\r\n    // don't update oob cells\r\n    if (i <= 0 || j <= 0 || i >= this.rows - 1 || j >= this.cols - 1) {\r\n      return;\r\n    }\r\n\r\n    // don't update empty adjacent cells\r\n    if (newCell === false && !this.check(n[i][j])) {\r\n      return;\r\n    }\r\n    // get adjacent cells\r\n    let A = n[i-1][j];\r\n    let B = n[i][j+1];\r\n    let C = n[i+1][j];\r\n    let D = n[i][j-1];\r\n    let ans = null;\r\n    //━ ┃ ┏ ┓ ┗ ┛ ┣ ┫ ┳ ┻ ╋\r\n    // fill cell with line character based on the adjacent cells\r\n    if (tool === \"draw\") {\r\n      if ((this.check(A) || this.check(C)) && !this.check(B) && !this.check(D)) {\r\n        ans = '┃';\r\n      } else if (!this.check(A) && !this.check(C) && (this.check(B) || this.check(D))) {\r\n        ans = '━';\r\n      } else if (!this.check(A) && this.check(B) && this.check(C) && !this.check(D)) {\r\n        ans = '┏';\r\n      } else if (!this.check(A) && !this.check(B) && this.check(C) && this.check(D)) {\r\n        ans = '┓';\r\n      } else if (this.check(A) && this.check(B) && !this.check(C) && !this.check(D)) {\r\n        ans = '┗';\r\n      } else if (this.check(A) && !this.check(B) && !this.check(C) && this.check(D)) {\r\n        ans = '┛';\r\n      } else if (this.check(A) && this.check(B) && this.check(C) && !this.check(D)) {\r\n        ans = '┣';\r\n      } else if (this.check(A) && !this.check(B) && this.check(C) && this.check(D)) {\r\n        ans = '┫';\r\n      } else if (!this.check(A) && this.check(B) && this.check(C) && this.check(D)) {\r\n        ans = '┳';\r\n      } else if (this.check(A) && this.check(B) && !this.check(C) && this.check(D)) {\r\n        ans = '┻';\r\n      } else if (this.check(A) && this.check(B) && this.check(C) && this.check(D)) {\r\n        ans = '╋';\r\n      } else {\r\n        ans = '╸'\r\n      }\r\n    } else if (tool === \"erase\") {\r\n      if (j < this.leftmost) {\r\n        ans = null\r\n      } else {\r\n        ans = \" \"\r\n      }\r\n    } else if (tool === \"text\") {\r\n      ans = this.state.key\r\n    }\r\n\r\n    n[i][j] = ans;\r\n\r\n    // check for leftmost cell updates\r\n    if(tool === \"erase\" && newCell) {\r\n      loop:\r\n      for (let m = 0; m < this.cols; m++) {\r\n        for (let k = 0; k < this.rows; k++) {\r\n          if (this.checkForLimits(n[k][m]) || (m === this.cols - 1 && k === this.rows - 1)) {\r\n            this.prevLeftmost = this.leftmost.valueOf()\r\n            this.leftmost =  m\r\n            break loop\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if(tool === \"draw\" && j < this.leftmost) {\r\n      this.leftmost = j;\r\n      // fill all the cells right of the leftmost non-empty cell to\r\n      // improve selecting it for copy pasting\r\n      for (let k = 0; k < this.rows; k++) {\r\n        for (let m = this.leftmost; m < this.cols; m++) {\r\n          if (!this.checkForLimits(n[k][m])) {\r\n            n[k][m] = \" \"\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // set all cells left of leftmost to null\r\n    if(this.prevLeftmost < this.leftmost) {\r\n      for (let k = 0; k < this.rows; k++) {\r\n        for (let m = 0; m < this.leftmost; m++) {\r\n            n[k][m] = null\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({cells: n});\r\n  }\r\n\r\n  handleClick(i, j) {\r\n    this.updateCell(i, j, true, this.state.tool);\r\n    this.updateCell(i-1, j, false, \"draw\");\r\n    this.updateCell(i+1, j, false, \"draw\");\r\n    this.updateCell(i, j-1, false, \"draw\");\r\n    this.updateCell(i, j+1, false, \"draw\");\r\n  }\r\n\r\n  handleMouseEnter(i, j) {\r\n    if (this.state.mouseDown) {\r\n      this.handleClick(i, j)\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    let newState = Object.assign({}, this.state);\r\n    let n = newState.cells;\r\n    for (let i = 0; i < this.rows; i++) {\r\n      for (let j = 0; j < this.cols; j++) {\r\n        n[i][j] = null;\r\n        this.setState({cells: n})\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-App\"\r\n           tabIndex='0'\r\n           style={{userSelect: this.state.select}}\r\n           onMouseUp={() => {this.setState({mouseDown: false})}}\r\n           onMouseDown={() => {this.setState({mouseDown: true})}}\r\n           onKeyDown={(e) => {this.setState({key: String.fromCharCode(e.keyCode)})}}\r\n      >\r\n        <Table \r\n          tabIndex='0'\r\n          colNum={this.state.col} \r\n          rowNum={this.state.row}\r\n          cells={this.state.cells}\r\n          onClick={(i, j) => this.handleClick(i, j)}\r\n          onMouseEnter={(i, j) => this.handleMouseEnter(i, j)}\r\n        />\r\n        <button onClick={() => {this.setState({tool: \"draw\", select: \"none\"})}}>Draw</button>\r\n        <button onClick={() => {this.setState({tool: \"erase\", select: \"none\"})}}>Erase</button>\r\n        <button onClick={() => {this.setState({tool: \"select\", select: \"auto\"})}}>Select</button>\r\n        <button onClick={() => {this.reset()}}>Reset</button>\r\n        <button onClick={() => {this.setState({tool: \"text\", select: \"none\"})}}>Text</button>\r\n        \r\n        <div style={{color:'white'}}>{this.state.key}</div>\r\n      </div>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}